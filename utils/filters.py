"""
M√≥dulo de Filtros y Procesamiento de Se√±ales
==========================================

Este m√≥dulo se encarga del procesamiento y an√°lisis de mensajes de trading,
incluyendo la detecci√≥n de se√±ales, acciones y el seguimiento de mensajes relacionados.

Funcionalidades Principales
-------------------------
1. Parsing de se√±ales de trading
2. Detecci√≥n de acciones en mensajes
3. Seguimiento de cadenas de respuestas
4. Extracci√≥n de informaci√≥n adicional de trading

Componentes del Sistema
---------------------

1. Parser de Se√±ales (parse_senal)
   Analiza y extrae informaci√≥n estructurada de se√±ales de trading.

   Ejemplo de se√±al:
   ```
   EURUSD
   BUY ZONE 1.0500-1.0520
   SL: 1.0450
   TP: 1.0550-1.0600-1.0650
   ```

   Proceso de parsing:
   a) Extrae el s√≠mbolo (ej: EURUSD)
   b) Identifica tipo (BUY/SELL) y zona de entrada
   c) Calcula precio de entrada √≥ptimo:
      - Para SELL: m√≠nimo de zona + 0.5
      - Para BUY: m√°ximo de zona - 1
   d) Extrae Stop Loss y Take Profit

   Retorna:
   ```python
   {
       'simbolo': 'EURUSD',
       'tipo': 'BUY',
       'entrada': 1.0519,  # Calculado autom√°ticamente
       'sl': 1.0450,
       'tp': 1.0600       # Primer TP de la serie
   }
   ```

2. Detector de Acciones (detectar_accion_mensaje)
   Identifica comandos y acciones en mensajes de respuesta.

   Acciones Soportadas:
   ```
   a) Ejecuci√≥n:
      - "hit entry" -> 'hit_entry'
      - "buy now" -> 'buy_now'
      - "sell now" -> 'sell_now'

   b) Gesti√≥n:
      - "close/exit" -> 'cerrar'
      - "break even" -> 'be'
      - "cancel" -> 'cancel'
      - "round" -> 'round'

   c) Resultados:
      - "tp hit" -> 'tp'
      - "sl hit" -> 'perdida'
   ```

   Ejemplos de Uso:
   ```python
   >>> detectar_accion_mensaje("Hit entry now!")
   'hit_entry'
   
   >>> detectar_accion_mensaje("Move to break even")
   'be'
   
   >>> detectar_accion_mensaje("TP1 hit")
   'tp1'
   ```

3. Buscador de Se√±ales (encontrar_senal_original)
   Rastrea la cadena de respuestas para encontrar la se√±al original.

   Funcionamiento:
   ```
   Se√±al Original
        ‚Ü≥ Respuesta 1
             ‚Ü≥ Respuesta 2 (acci√≥n)
                  ‚Ü≥ Respuesta 3
   ```

   Estados de Se√±al:
   - "pendiente": Orden esperando ejecuci√≥n
   - "activa": Orden en mercado
   - "cancelada": Orden cancelada
   - "no_encontrada": No se hall√≥ la se√±al

   Ejemplo de Uso:
   ```python
   msg_id, estado, texto = await encontrar_senal_original(
       mensaje_actual,
       client,
       mensajes_senales,
       ordenes_pendientes,
       senales_activas,
       senales_canceladas
   )
   ```

4. Extractor de Info Adicional (extract_trade_info)
   Obtiene detalles complementarios de trading.

   Informaci√≥n Extra√≠da:
   ```python
   {
       'lotes': 0.1,      # Tama√±o de la operaci√≥n
       'riesgo': 2.0,     # Porcentaje de riesgo
       'ronda': 1         # N√∫mero de intento/ronda
   }
   ```

   Ejemplos de Entrada:
   ```
   "Entry with lot size 0.1"
   "Risk 2% on this trade"
   "Round 2 for EURUSD"
   ```

Flujo de Procesamiento
--------------------
1. Recepci√≥n de mensaje
2. Intento de parsing como se√±al
3. Si no es se√±al, detecci√≥n de acci√≥n
4. Si es acci√≥n, b√∫squeda de se√±al original
5. Extracci√≥n de informaci√≥n adicional

Ejemplos de Uso Completo
----------------------
1. Procesamiento de Nueva Se√±al:
   ```python
   texto = '''
   EURUSD
   BUY ZONE 1.0500-1.0520
   SL: 1.0450
   TP: 1.0550-1.0600
   Lot size: 0.1
   '''
   
   # Parsear se√±al
   senal = parse_senal(texto)
   if senal:
       info_adicional = extract_trade_info(texto)
       # Combinar informaci√≥n
       senal.update(info_adicional or {})
   ```

2. Procesamiento de Acci√≥n:
   ```python
   texto_respuesta = "Move to break even now"
   accion = detectar_accion_mensaje(texto_respuesta)
   if accion == 'be':
       # Buscar se√±al original
       id_original, estado, texto = await encontrar_senal_original(...)
   ```

Notas Importantes
---------------
- Las se√±ales deben seguir el formato especificado
- Las acciones son case-insensitive
- El sistema maneja m√∫ltiples variantes de cada comando
- Se implementa protecci√≥n contra loops infinitos
- Logging detallado para debugging

Versi√≥n: 1.0.0
Autor: Fran
√öltima actualizaci√≥n: 2024-01-01
"""

import re
import logging

logger = logging.getLogger(__name__)

def parse_senal(texto):
    """
    Extrae informaci√≥n de una se√±al de trading y devuelve:
    s√≠mbolo, tipo, entrada, sl, y solo el primer tp.
    """
    texto = texto.upper()

    # Extraer s√≠mbolo (ej: XAUUSD)
    simbolo_match = re.search(r'\b(XAUUSD|EURUSD|GBPUSD|USDJPY)\b', texto)
    simbolo = simbolo_match.group(1) if simbolo_match else "XAUUSD"

    # Extraer tipo y rango (BUY/SELL ZONE min-max)
    orden = re.search(r'\b(BUY|SELL)\b.*?ZONE\s*(\d+\.?\d*)\s*-\s*(\d+\.?\d*)', texto)
    if not orden:
        return None

    tipo = orden.group(1)
    rango_min = float(orden.group(2))
    rango_max = float(orden.group(3))

    # Entrada modificada seg√∫n tipo
    if tipo == "SELL":
        entrada = rango_min + 0.5
    else:  # BUY
        entrada = rango_max - 1

    # Extraer SL
    sl_match = re.search(r'SL[:\s]+(\d+\.?\d*)', texto)
    sl = float(sl_match.group(1)) if sl_match else None

    # Extraer TPs separados por guiones
    tp_match = re.search(r'TP[:\s]+([\d\-.]+)', texto)
    primer_tp = None
    if tp_match:
        tps = [float(x) for x in tp_match.group(1).split('-') if x]
        if tps:
            primer_tp = tps[1]

    return {
        'simbolo': simbolo,
        'tipo': tipo,
        'entrada': entrada,
        'sl': sl,
        'tp': primer_tp
    }

def detectar_accion_mensaje(texto):
    """
    Detecta el tipo de acci√≥n en el mensaje.
    Retorna: 'cerrar', 'be', 'cancel', 'hit_entry', 'round', 'tp', 'perdida', 'buy_now', 'sell_now' o None
    """
    texto = texto.lower().strip()
    
    # Primero verificar si contiene palabras que invalidan Round
    palabras_invalidas = ["don't", "dont", "sl", "tp", "vip"]
    if any(palabra in texto for palabra in palabras_invalidas) and "round" in texto:
        return None
        
    # Verificar comandos de ejecuci√≥n inmediata
    if "buy now" in texto:
        return "buy_now"
    if "sell now" in texto:
        return "sell_now"
        
    # Verificar Round antes que otras acciones
    if "round" in texto or "ronda" in texto:
        return "round"
    
    # Acciones b√°sicas con m√∫ltiples variantes
    acciones = {
        'cerrar': [
            'close', 'closing', 'closed', 'exit now', 'exit trade'
        ],
        'be': [
            'break even', 'move to be', 'move stop', 'stop to entry',
            'stop loss to entry', 'set breakeven now move', 'locked'
        ],
        'cancel': ['cancel', 'cancelar', 'cancelled'],
        'perdida': ['hit risk', 'stop hit', 'sl hit'],
        'hit_entry': [
            'hit entry', 'entry now', 'enter now', 'execute now', 
            'take entry', 'NOW:'
        ]
    }

    # Revisar acciones b√°sicas
    for accion, palabras_clave in acciones.items():
        for palabra in palabras_clave:
            if palabra in texto:
                return accion

    # Revisar TP espec√≠ficamente
    if texto.startswith('tp'):
        return texto  # Retorna el texto completo del TP

    return None

async def encontrar_senal_original(mensaje_actual, client, mensajes_senales, ordenes_pendientes, senales_activas, senales_canceladas):
    """
    Busca recursivamente la se√±al original siguiendo la cadena de respuestas.
    Sin l√≠mite de profundidad para asegurar encontrar la se√±al original.
    
    Args:
        mensaje_actual: Mensaje actual de Telegram
        client: Cliente de Telegram
        mensajes_senales: Diccionario de se√±ales
        ordenes_pendientes: Diccionario de √≥rdenes pendientes
        senales_activas: Diccionario de se√±ales activas
        senales_canceladas: Diccionario de se√±ales canceladas
    
    Returns:
        tuple: (mensaje_id, estado, texto_senal)
            mensaje_id: ID del mensaje de la se√±al original
            estado: Estado de la se√±al ("pendiente", "activa", "cancelada", "no_encontrada")
            texto_senal: Texto de la se√±al original
    """
    mensaje_id = getattr(mensaje_actual, 'reply_to_msg_id', None)
    chat_id = getattr(mensaje_actual, 'chat_id', None)
    visited_msgs = set()  # Para evitar loops infinitos
    depth = 0
    
    logger.info(f"üîç Iniciando b√∫squeda desde mensaje {mensaje_id}")
    
    while mensaje_id and chat_id and mensaje_id not in visited_msgs:
        depth += 1
        visited_msgs.add(mensaje_id)
        logger.info(f"üìç Profundidad {depth}: Revisando mensaje {mensaje_id}")
        
        # Verificar si este mensaje_id corresponde a una se√±al
        if mensaje_id in ordenes_pendientes:
            logger.info(f"‚úÖ Encontrada se√±al pendiente: {mensaje_id}")
            return mensaje_id, "pendiente", mensajes_senales.get(mensaje_id)
            
        if mensaje_id in senales_activas:
            logger.info(f"‚úÖ Encontrada se√±al activa: {mensaje_id}")
            return mensaje_id, "activa", mensajes_senales.get(mensaje_id)
            
        if mensaje_id in senales_canceladas:
            logger.info(f"‚úÖ Encontrada se√±al cancelada: {mensaje_id}")
            return mensaje_id, "cancelada", mensajes_senales.get(mensaje_id)
            
        if mensaje_id in mensajes_senales:
            logger.info(f"üìù Mensaje {mensaje_id} est√° en mensajes_senales")
            
        try:
            # Obtener el mensaje al que responde
            mensaje = await client.get_messages(chat_id, ids=mensaje_id)
            if mensaje and mensaje.reply_to_msg_id:
                logger.info(f"‚Ü©Ô∏è Mensaje {mensaje_id} responde a {mensaje.reply_to_msg_id}")
                mensaje_id = mensaje.reply_to_msg_id
                continue
            else:
                logger.info(f"‚ùå Mensaje {mensaje_id} no tiene reply_to_msg_id")
                break
        except Exception as e:
            logger.error(f"‚ùå Error buscando se√±al original en {mensaje_id}: {e}")
            break
    
    logger.info(f"üîç B√∫squeda terminada despu√©s de {depth} niveles")
    return None, "no_encontrada", None

def extract_trade_info(texto):
    """
    Funci√≥n auxiliar para extraer informaci√≥n adicional de trading
    """
    info = {}
    
    # Extraer informaci√≥n de lotes si existe
    lotes_match = re.search(r'(?:lot|size)[:\s]+(\d*\.?\d+)', texto.lower())
    if lotes_match:
        info['lotes'] = float(lotes_match.group(1))

    # Extraer informaci√≥n de riesgo si existe
    riesgo_match = re.search(r'(?:risk|r)[:\s]+(\d*\.?\d+)%?', texto.lower())
    if riesgo_match:
        info['riesgo'] = float(riesgo_match.group(1))

    # Extraer n√∫mero de ronda si existe
    round_match = re.search(r'round\s*(\d+)', texto.lower())
    if round_match:
        info['ronda'] = int(round_match.group(1))

    return info if info else None
